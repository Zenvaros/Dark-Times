    $fmdFake              = 0  // used to spot erroneous aliases
    $fmdFlag1             = 1  // Flag, used for the script engine
    $fmdFlag2             = 2  // Flag, used for the script engine
    $fmdFlag3             = 3  // Flag, used for the script engine
    $fmdFlag4             = 4  // Flag, used for the script engine
    $fmdFlag5             = 5  // Flag, used for the script engine
    $fmdFlag6             = 6  // Flag, used for the script engine
    $fmdFlag7             = 7  // Flag, used for the script engine
    $fmdFlag8             = 8  // Flag, used for the script engine
    $fmdFlag9             = 9  // Flag, used for the script engine
    $fmdFlag10            = 10  // Flag, used for the script engine
    $fmdWarWeariness      = 11  // reduction in morale if at war
    $fmdWarResilience     = 12  // #of try: gain in morale if under 100
    $fmdVPDecay           = 13  // 1/10% of VP decay per turn (negative: gain)
    $fmdEntrenchBonus     = 14  // EntrenchBonus
    $fmdAbsCohModOff      = 15  // Absolute modifier (in pt) to cohesion, if parent group is in Assault/Offensive
    $fmdAbsCohModDef      = 16  // Absolute modifier (in pt) to cohesion, if parent group is in Defensive/Passive
    $fmdPercCohModOff     = 17  // Relative modifier (in % of final value) to cohesion, if parent group is in Assault/Offensive
    $fmdPercCohModDef     = 18  // Relative modifier (in % of final value) to cohesion, if parent group is in Defensive/Passive
    $fmdPercModHits       = 19  // Relative modifier (in % of final value) to Max Hits
    $fmdAbsEvasionMod     = 20  // Absolute modifier (in pt) to Evasion value
    $fmdAbsPatrolMod      = 21  // Absolute modifier (in pt) to Patrol value
    $fmdAbsPoliceMod      = 22  // Absolute modifier (in pt) to Police value
    $fmdPercPenModLong    = 24  // Relative modifier (in % of final value) to Penetration value - Long Range
    $fmdPercPenModMed     = 25  // Relative modifier (in % of final value) to Penetration value - Medium Range
    $fmdPercPenModShort   = 26  // Relative modifier (in % of final value) to Penetration value - Short Range
    $fmdPercPenModClose   = 27  // Relative modifier (in % of final value) to Penetration value - Close (assault) Range
    $fmdPercAsltDmgMod    = 28  // Relative modifier (in % of final value) to hits done in assault
    $fmdPercAsltCohMod    = 29  // Relative modifier (in % of final value) to cohesion done in assault
    $fmdPercDmgModLong    = 30  // Relative modifier (in % of final value) to Damage value - Long Range
    $fmdPercDmgModMed     = 31  // Relative modifier (in % of final value) to Damage value - Medium Range
    $fmdPercDmgModShort   = 32  // Relative modifier (in % of final value) to Damage value - Short Range
    $fmdPercCohModLong    = 33  // Relative modifier (in % of final value) to Cohesion value - Long Range
    $fmdPercCohModMed     = 34  // Relative modifier (in % of final value) to Cohesion value - Medium Range
    $fmdPercCohModShort   = 35  // Relative modifier (in % of final value) to Cohesion value - Short Range
    $fmdPercOffAsltMod    = 36  // Relative modifier (in % of final value) to Assault Rating - Assaulting
    $fmdPercDefAsltMod    = 37  // Relative modifier (in % of final value) to Assault Rating - Defending
    $fmdPercDiscMod       = 38  // Relative modifier (in % of final value) to Discipline Rating
    $fmdPercProtMod       = 39  // Relative modifier (in % of final value) to Protection Rating
    $fmdPercROFModLong    = 40  // Relative modifier (in % of final value) to ROF Rating - Long
    $fmdPercROFModMed     = 41  // Relative modifier (in % of final value) to ROF Rating - Medium
    $fmdPercROFModShort   = 42  // Relative modifier (in % of final value) to ROF Rating - Short
    $fmdPercROFModClose   = 43  // Relative modifier (in % of final value) to ROF Rating - Close
    $fmdPercRngModLong    = 44  // Relative modifier (in % of final value) to Range Rating - Long
    $fmdPercRngModMed     = 45  // Relative modifier (in % of final value) to Range Rating - Medium
    $fmdPercRngModShort   = 46  // Relative modifier (in % of final value) to Range Rating - Short
    $fmdPercInitModLong   = 47  // Relative modifier (in % of final value) to Init Rating - Long
    $fmdPercInitModMed    = 48  // Relative modifier (in % of final value) to Init Rating - Medium
    $fmdPercInitModShort  = 49  // Relative modifier (in % of final value) to Init Rating - Short
    $fmdPercInitModClose  = 50  // Relative modifier (in % of final value) to Init Rating - Close
    $fmdPercFireOModLong  = 51  // Relative modifier (in % of final value) to Offensive Fire Rating - Long
    $fmdPercFireOModMed   = 52  // Relative modifier (in % of final value) to Offensive Fire Rating - Medium
    $fmdPercFireOModShort = 53  // Relative modifier (in % of final value) to Offensive Fire Rating - Short
    $fmdPercFireDModLong  = 54  // Relative modifier (in % of final value) to Defensive Fire Rating - Long
    $fmdPercFireDModMed   = 55  // Relative modifier (in % of final value) to Defensive Fire Rating - Medium
    $fmdPercFireDModShort = 56  // Relative modifier (in % of final value) to Defensive Fire Rating - Short
    $fmdPercCohMoveMod    = 57  // Relative modifier (in % of final value) to Loss of Cohesion while moving (negative is good)
    $fmdPercAtrMoveMod    = 58  // Relative modifier (in % of final value) to Loss of hits while moving
    $fmdAbsDetectLandMod  = 59  // Absolute modifier (in pt) to Detect Land Value
    $fmdPercDetectLandMod = 60  // Relative modifier (in % of final value) to Detect Land Value
    $fmdAbsDetectSeaMod   = 61  // Absolute modifier (in pt) to Detect Sea Value
    $fmdPercDetectSeaMod  = 62  // Relative modifier (in % of final value) to Detect Sea Value
    $fmdAbsHideMod        = 63  // Absolute modifier (in pt) to Hide Value
    $fmdPercHideMod       = 64  // Relative modifier (in % of final value) to Hide Value
    $fmdAbsProgRateMod    = 65  // Absolute modifier (in pt) to ProgRate Value (negative is good = cost to reach next level)
    $fmdPercProgRateMod   = 66  // Relative modifier (in % of final value) to ProgRate Value (negative is good = cost to reach next level)
    $fmdPercLdrStratMod   = 67  // Relative modifier (in % of final value) to Leader Strategic Rating
    $fmdPercLdrOffenseMod = 68  // Relative modifier (in % of final value) to Leader Offensive Rating
    $fmdPercLdrDefenseMod = 69  // Relative modifier (in % of final value) to Leader Defensive Rating
    $fmdPercLdrPoliticMod = 70  // Relative modifier (in % of final value) to Leader Politic Rating (negative is good)
    $fmdPercBlockadeMod   = 71  // Relative modifier (in % of final value) to Blockade
    $fmdPercSupplyUseMod  = 72  // Relative modifier (in % of final value) to Supply Usage per turn
    $fmdPercAmmoUseMod    = 73  // Relative modifier (in % of final value) to Ammo Usage per turn
    $fmdPercPowerUseMod   = 74  // Relative modifier (in % of final value) to Power Usage per turn (AWE+)
    $fmdPercSupplyStoreMod= 75  // Relative modifier (in % of final value) to Supply Storage per turn
    $fmdPercAmmoStoreMod  = 76  // Relative modifier (in % of final value) to Ammo Storage per turn
    $fmdPercPowerStoreMod = 77  // Relative modifier (in % of final value) to Power Storage per turn (AWE+)
    $fmdPercStrucInputCost= 78  // Relative modifier (in % of final value) to Structure Input Cost (base 100, negative is good) (has scope)
    $fmdPercStrucOutputEff= 79  // Relative modifier (in % of final value) to Structure Output efficiency (base 100, positive is good) (has scope)
    $fmdPercSellChanceMod = 80  // Relative modifier (in % of final value) to sell a product (base 100) if in competition with another nation
    $fmdPercBuyChanceMod  = 81  // Relative modifier (in % of final value) to buy a product (base 100) if in competition with another nation
    $fmdMdlCostPercMoney  = 82  // Relative modifier (in % of final value) in money cost for a particular family model
    $fmdMdlCostPercDay    = 83  // Relative modifier (in % of final value) in construction days for a particular family model
    $fmdMdlCostAbsDay     = 84  // Absolute modifier (in pt) in construction days for a particular family model
    $fmdMdlCostPercGoods  = 85  // Relative modifier (in % of final value) in construction Goods for a particular family model
    $fmdMdlBuildWeightPerc= 86  // Relative modifier (in % of final value) in build weight for a particular family model (Unit will use the reduction of their first model)
    $fmdGRateStateRelAbs  = 87  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main religion of the region is the State Religion (= capital region)
    $fmdGRateNatSoilRelAbs= 88  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main religion of the region is one of the national soil Religion
    $fmdGRateForeignRelAbs= 89  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main religion of the region is not one of the national soil Religion
    $fmdGRateStateEthAbs  = 90  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main ethnic of the region is the Capital region ethnic
    $fmdGRateNatSoilEthAbs= 91  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main ethnic of the region is one of the national soil ethnic
    $fmdGRateForeignEthAbs= 92  // Absolute modifier (in 1/100 of %) to the Growth Rate, if the main ethnic of the region is not one of the national soil ethnic
    $fmdMobServToPeasPerc = 93  // Probability (in %) that a servile converts to Peasant (time the number needed)
    $fmdMobServToWorkPerc = 94  // Probability (in %) that a servile converts to Worker (time the number needed)
    $fmdMobPeasToWorkPerc = 95  // Probability (in %) that a Peasant converts to Worker (time the number needed)
    $fmdMobWorkToPeasPerc = 96  // Probability (in %) that a Worker converts to Peasant (time the number needed)
    $fmdMobWorkToMidlPerc = 97  // Probability (in %) that a Worker converts to Middle-class (1 per roll max)
    $fmdMobMidlToUppePerc = 98  // Probability (in %) that a Middle-Class converts to Upper-Class (1 per region max)
    $fmdMobArisToUppePerc = 99  // Probability (in %) that an Aristocrat converts to Upper-Class (1 per region max)
    $fmdMobUppeToArisPerc =100  // Probability (in %) that a Upper-Class converts to an Aristocrat (1 per region max)
    $fmdEmigPeasantPerc   =101  // Probability (in %) that a Peasant emigrate to an adjacent region in need (time the number needed)
    $fmdEmigWorkerPerc    =102  // Probability (in %) that a Worker  emigrate to an adjacent region in need (time the number needed)
    $fmdEmigMiddlePerc    =103  // Probability (in %) that a Middle-Class emigrate to an adjacent region in need (time the number needed)
    $fmdEmigUpperPerc     =104  // Probability (in %) that a Upper-Class emigrate to an adjacent region in need (time the number needed)
    $fmdImigPeasantPerc   =105  // Probability (in %) that a Peasant imigrate to a region in need (alters the Emigrate%)
    $fmdImigWorkerPerc    =106  // Probability (in %) that a Worker  imigrate to a region in need (alters the Emigrate%)
    $fmdImigMiddlePerc    =107  // Probability (in %) that a Middle-Class imigrate to a region in need (alters the Emigrate%)
    $fmdimigUpperPerc     =108  // Probability (in %) that a Upper-Class imigrate to a region in need (alters the Emigrate%)
    $fmdMiliBaseServileAbs=109  // Change (in 1/100 pts) per CheckPopMilitantism phase to Servile Militantism
    $fmdMiliBasePeasantAbs=110  // Change (in 1/100 pts) per CheckPopMilitantism phase to Peasant Militantism
    $fmdMiliBaseWorkerAbs =111  // Change (in 1/100 pts) per CheckPopMilitantism phase to Worker Militantism
    $fmdMiliBaseMiddleAbs =112  // Change (in 1/100 pts) per CheckPopMilitantism phase to Middle Militantism
    $fmdMiliBaseUpperAbs  =113  // Change (in 1/100 pts) per CheckPopMilitantism phase to Upper Militantism
    $fmdMiliBaseAristoAbs =114  // Change (in 1/100 pts) per CheckPopMilitantism phase to Aristocrat Militantism
    $fmdMiliMartialPolEff =115  // Police Value efficiency (%) for Martial law effect against Militantism
    $fmdMiliMartialContEff=116  // Number of contentment points lost (in 1/100 of pts) per Militantism point suppressed, from Martial Law
    $fmdContBaseServileAbs=117  // Change (in 1/100 pts) per CheckPopContentment phase to Servile Contentment
    $fmdContBasePeasantAbs=118  // Change (in 1/100 pts) per CheckPopContentment phase to Peasant Contentment
    $fmdContBaseWorkerAbs =119  // Change (in 1/100 pts) per CheckPopContentment phase to Worker Contentment
    $fmdContBaseMiddleAbs =120  // Change (in 1/100 pts) per CheckPopContentment phase to Middle Contentment
    $fmdContBaseUpperAbs  =121  // Change (in 1/100 pts) per CheckPopContentment phase to Upper Contentment
    $fmdContBaseAristoAbs =122  // Change (in 1/100 pts) per CheckPopContentment phase to Aristocrat Contentment
    $fmdContMilitServileEff=123 // Change (in %) per CheckPopContentment phase to Servile Contentment because of Militancy
    $fmdContMilitPeasantEff=124 // Change (in %) per CheckPopContentment phase to Peasant Contentment because of Militancy
    $fmdContMilitWorkerEff=125  // Change (in %) per CheckPopContentment phase to Worker Contentment because of Militancy
    $fmdContMilitMiddleEff=126  // Change (in %) per CheckPopContentment phase to Middle Contentment because of Militancy
    $fmdContMilitUpperEff =127  // Change (in %) per CheckPopContentment phase to Upper Contentment because of Militancy
    $fmdContMilitAristoEff=128  // Change (in %) per CheckPopContentment phase to Aristocrat Contentment because of Militancy
    $fmdEduBaseServileAbs =129  // Change (in 1/100 pts) per CheckPopEducation phase to Servile Education
    $fmdEduBasePeasantAbs =130  // Change (in 1/100 pts) per CheckPopEducation phase to Peasant Education
    $fmdEduBaseWorkerAbs  =131  // Change (in 1/100 pts) per CheckPopEducation phase to Worker  Education
    $fmdEduBaseMiddleAbs  =132  // Change (in 1/100 pts) per CheckPopEducation phase to Middle  Education
    $fmdEduBaseUpperAbs   =133  // Change (in 1/100 pts) per CheckPopEducation phase to Upper   Education
    $fmdEduBaseAristoAbs  =134  // Change (in 1/100 pts) per CheckPopEducation phase to Aristo  Education
    $fmdEduMaxServileAbs  =135  // Max value (in plain pts) in CheckPopEducation phase for Servile Education
    $fmdEduMaxPeasantAbs  =136  // Max value (in plain pts) in CheckPopEducation phase for Peasant Education
    $fmdEduMaxWorkerAbs   =137  // Max value (in plain pts) in CheckPopEducation phase for Worker  Education
    $fmdEduMaxMiddleAbs   =138  // Max value (in plain pts) in CheckPopEducation phase for Middle  Education
    $fmdEduMaxUpperAbs    =139  // Max value (in plain pts) in CheckPopEducation phase for Upper   Education
    $fmdEduMaxAristoAbs   =140  // Max value (in plain pts) in CheckPopEducation phase for Aristo  Education
    $fmdContStateRelAbs   =141  // Absolute modifier (in 1/100 of %) to Contentment, if the main religion of the region is the State Religion (= capital region)
    $fmdContNatSoilRelAbs =142  // Absolute modifier (in 1/100 of %) to Contentment, if the main religion of the region is one of the national soil Religion
    $fmdContForeignRelAbs =143  // Absolute modifier (in 1/100 of %) to Contentment, if the main religion of the region is not one of the national soil Religion
    $fmdContStateEthAbs   =144  // Absolute modifier (in 1/100 of %) to Contentment, if the main ethnic of the region is the Capital region ethnic
    $fmdContNatSoilEthAbs =145  // Absolute modifier (in 1/100 of %) to Contentment, if the main ethnic of the region is one of the national soil ethnic
    $fmdContForeignEthAbs =146  // Absolute modifier (in 1/100 of %) to Contentment, if the main ethnic of the region is not one of the national soil ethnic
    $fmdChgStateRelAbs    =147  // Change (in 1/100 pts) to state Religion %, if the main religion of the region is the State Religion (= capital region)
    $fmdChgNatSoilRelAbs  =148  // Change (in 1/100 pts) to state Religion %, if the main religion of the region is one of the national soil Religion
    $fmdChgForeignRelAbs  =149  // Change (in 1/100 pts) to state Religion %, if the main religion of the region is not one of the national soil Religion
    $fmdChgStateEthAbs    =150  // Change (in 1/100 pts) to state Ethnic %, if the main ethnic of the region is the Capital region ethnic
    $fmdChgNatSoilEthAbs  =151  // Change (in 1/100 pts) to state Ethnic %, if the main ethnic of the region is one of the national soil ethnic
    $fmdChgForeignEthAbs  =152  // Change (in 1/100 pts) to state Ethnic %, if the main ethnic of the region is not one of the national soil ethnic
    $fmdDiplomatMaxAbs    =153  // Max number of diplomats possible
    $fmdDiploGainBaseHAbs =154  // Number of diplomats (in 1/100 pts) gained (base)
    $fmdDiploGainCabinHAbs=155  // Number of diplomats (in 1/100 pts) gained per Diplomacy rating of the Cabinet
    $fmdConsumptNatFdPerc =156 // Change (in %) to the 100% Consumption base of Pop, National area, Foods group
    $fmdConsumptNatGdPerc =157 // Change (in %) to the 100% Consumption base of Pop, National area, Goods group
    $fmdConsumptNatLxPerc =158 // Change (in %) to the 100% Consumption base of Pop, National area, Luxuries group
    $fmdConsumptColFdPerc =159 // Change (in %) to the 100% Consumption base of Pop, Colonial area, Foods group
    $fmdConsumptColGdPerc =160 // Change (in %) to the 100% Consumption base of Pop, Colonial area, Goods group
    $fmdConsumptColLxPerc =161 // Change (in %) to the 100% Consumption base of Pop, Colonial area, Luxuries group
    $fmdBaseInternMarkPen =162 // Base Internal Market Penetration (from FA, Setup, Events)
    $fmdForcePoolCoeff    =163 // Change (in %) to the unit force pool (per family), base is 100% (-20 => 80%)
    $fmdReplacementsCoeff =164 // Change (in %) to the Replacement coeff , base is 100%.
    $fmdXpBonusLandBuild  =165 // Bonus in Pts to land domain unit newly built  - if more precision needed, specify by family
    $fmdXpBonusAirBuild   =166 // Bonus in Pts to air domain unit newly built   - if more precision needed, specify by family
    $fmdXpBonusNavalBuild =167 // Bonus in Pts to naval domain unit newly built - if more precision needed, specify by family
    $fmdTranspEffNone     =168 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 15% is used
    $fmdTranspEffTrack    =169 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 25% is used
    $fmdTranspEffRoad     =170 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 30% is used
    $fmdTranspEffMajRoad  =171 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 35% is used - No MajRoad in VGN and in game having railways
    $fmdTranspEffRailroad =172 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 50% is used
    $fmdTranspEffAdvRail  =173 // Transport efficiency in % (used in Production efficiency, not on speed). If not set, default value of 60% is used
    $fmdNatServileTaxBase =174 // Change (in money unit) to the tax base for 100 serviles in national region
    $fmdNatPeasantTaxBase =175 // Change (in money unit) to the tax base for 100 peasants in national region
    $fmdNatWorkerTaxBase  =176 // Change (in money unit) to the tax base for 100 workers  in national region
    $fmdNatMiddleTaxBase  =177 // Change (in money unit) to the tax base for 100 middle-class in national region
    $fmdNatUpperTaxBase   =178 // Change (in money unit) to the tax base for 100 upper-class in national region
    $fmdNatAristoTaxBase  =179 // Change (in money unit) to the tax base for 100 aristos in national region
    $fmdColServileTaxBase =180 // Change (in money unit) to the tax base for 100 serviles in colonial region
    $fmdColPeasantTaxBase =181 // Change (in money unit) to the tax base for 100 peasants in colonial region
    $fmdColWorkerTaxBase  =182 // Change (in money unit) to the tax base for 100 workers  in colonial region
    $fmdColMiddleTaxBase  =183 // Change (in money unit) to the tax base for 100 middle-class in colonial region
    $fmdColUpperTaxBase   =184 // Change (in money unit) to the tax base for 100 upper-class in colonial region
    $fmdColAristoTaxBase  =185 // Change (in money unit) to the tax base for 100 aristos in colonial region
    $fmdCensusTaxMax      =186 // Change (in %) to the Max tax possible (for 100 pts of pop)
    $fmdIncomeTaxMax      =187 // Change (in %) to the Max tax possible (for 100 pts of pop)
    $fmdExciseTaxMax      =188 // Change (in %) to the Max tax possible (for 100 pts of pop)
    $fmdTariffTaxMax      =189 // Change (in %) to the Max tax possible (for 100 pts of pop)
    $fmdCorporateTaxMax   =190 // Change (in %) to the Max tax possible (for 100 pts of pop)
    $fmdMaritimeTaxMax    =191 // Change (in money unit) to the Max tax possible (for 100 pts of CommerceShip)
    $fmdUpgStrucRecycle   =192 // Percentage of the old structure cost recycled when upgrading - NO SCOPE
    $fmdTechUpgRetainPerc =193 // Change to the base % of Xp retained (75%) when an element tech upgrade, per family (has a scope)
    $fmdTechUpgReplUse    =194 // Change to the base % chance of using up a replacement (50%) when an element tech upgrade, per family
    $fmdReplMaxPerUnitLnd =195 // Bonus to the max number (base is 1) of replacements a unit can get per turn
    $fmdReplMaxPerUnitNav =196 // Bonus to the max number (base is 1) of replacements a unit can get per turn
    $fmdReplMaxPerUnitAir =197 // Bonus to the max number (base is 1) of replacements a unit can get per turn
    $fmdIntrinsicProd     =198 // Additional coeff (start at 0 but there is script command) to the intrinsic production of a given merchandise (family = UID of the merchandise)
    $fmdCohesionRegain    =199 // Bonus or penalty in 1/100 pt to the cohesion recovery value
    $fmdPercStrucCostCoeff=200 // Relative modifier (in % of final value) to Structure Cost (excluding build time) (base 100, positive is good) (has scope)
    $fmdPercStrucCostDay  =201 // Relative modifier (in % of final value) to structure build time only
    $fmdPercVPAccrualTurn =202 // Relative modifier (in % of final value) to VP (Prestige) accrual per turn (from strat cities, obj, SOIs)
    $fmdColSOIGainCoeff   =203 // coefficient to SOI gain (in %, 50% = half gain)
    $fmdSSLSupplyCoeff    =204 // Modifier to the base SSL (Safe Supply Limit), i.e 5 = 105% of normal SSL (good) - General Supply
    $fmdSSLAmmoCoeff      =205 // Modifier to the base SSL (Safe Supply Limit), i.e 5 = 105% of normal SSL (good) - Ammo Supply
    $fmdSSLPowerCoeff     =206 // Modifier to the base SSL (Safe Supply Limit), i.e 5 = 105% of normal SSL (good) - Fuel Supply
    $fmdStrucFPoolCoeff   =207 // Change (in %) to the structure force pool (per family), base is 100% (-20 => 80%) (has scope)
    $fmdColStateSpending  =208 // Modifier to a base 100% spending of State Funds in colonial area (-20% would be a reduction in spending)
    $fmdRevoltRiskMod     =209 // Modifier to the base revolt risk in % (100 would be +100% chance, -100 would be 0 chance)